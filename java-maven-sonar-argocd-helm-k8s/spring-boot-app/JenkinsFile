pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'main', url: 'https://github.com/Manasa2835/Jenkins-Zero-To-Hero.git'      
      }
    }   
    
   stage('Build') {
            steps {
                script {
                    sh 'pwd'
                    sh 'ls -l'      
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh 'mvn clean package'
                    sh 'ls -l target'
                   }
                    //sh 'pwd'
                    //sh 'ls -l'
                    //sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
                }
            }
        }

stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://100.27.13.173:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

 stage('upload into jfrog artifactory'){
         steps{
          dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app/target'){
          rtServer (
            id: 'Artifactory-1',
            url: 'http://100.27.13.173:8081/artifactory',
                // If you're using Credentials ID:
                credentialsId: 'jfrog-connection',
                timeout: 300
        )

          rtUpload (
              serverId: 'Artifactory-1',
              spec: '''{
                    "files": [
                      {
                        "pattern": "spring-boot-demo-1.0.jar",
                        "target": "example-repo-local"
                      }
                   ]
              }''',
          )
          }
          }
          }

stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "manasadocker123/pipeline_final:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
     }

stage('Vulnerability Scanning with Trivy') {
  environment {
    TRIVY_IMAGE = "aquasec/trivy"
    DOCKER_IMAGE = "manasadocker123/pipeline_final:${BUILD_NUMBER}"
  }
  steps {
    script {
      sh "docker pull ${TRIVY_IMAGE}"
      sh "docker run --rm ${TRIVY_IMAGE} image ${DOCKER_IMAGE} --exit-code 0 --severity HIGH --no-progress"
    }
  }
}
}
}
